name: Sprint Progress Tracker

on:
  schedule:
    - cron: '0 12 * * *'  # Daily at noon
  workflow_dispatch:      # Manual trigger
  issues:
    types: [closed, reopened, labeled, unlabeled]

jobs:
  track-progress:
    runs-on: ubuntu-latest
    steps:
      - name: Calculate Sprint Progress
        uses: actions/github-script@v7
        with:
          script: |
            // Get all issues
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'all',
              per_page: 100
            });
            
            // Group by sprint
            const sprints = {
              'Sprint 1': { total: 0, completed: 0, inProgress: 0 },
              'Sprint 2': { total: 0, completed: 0, inProgress: 0 },
              'Sprint 3': { total: 0, completed: 0, inProgress: 0 }
            };
            
            issues.data.forEach(issue => {
              const labels = issue.labels.map(l => l.name);
              
              // Find sprint
              const sprint = labels.find(l => l.startsWith('Sprint '));
              if (!sprint) return;
              
              sprints[sprint].total++;
              
              if (issue.state === 'closed' || labels.includes('completed')) {
                sprints[sprint].completed++;
              } else if (labels.includes('in-progress')) {
                sprints[sprint].inProgress++;
              }
            });
            
            // Calculate percentages and create report
            let report = '# 📊 Sprint Progress Report\n\n';
            report += `Generated: ${new Date().toLocaleString()}\n\n`;
            
            Object.entries(sprints).forEach(([name, data]) => {
              const percentage = data.total > 0 ? Math.round((data.completed / data.total) * 100) : 0;
              const progressBar = '█'.repeat(Math.floor(percentage / 5)) + '░'.repeat(20 - Math.floor(percentage / 5));
              
              report += `## ${name}\n`;
              report += `Progress: [${progressBar}] ${percentage}%\n`;
              report += `- Total Tasks: ${data.total}\n`;
              report += `- Completed: ${data.completed} ✅\n`;
              report += `- In Progress: ${data.inProgress} 🔄\n`;
              report += `- Not Started: ${data.total - data.completed - data.inProgress} ⏳\n\n`;
            });
            
            // Add velocity metrics
            const totalTasks = Object.values(sprints).reduce((sum, s) => sum + s.total, 0);
            const completedTasks = Object.values(sprints).reduce((sum, s) => sum + s.completed, 0);
            const overallProgress = Math.round((completedTasks / totalTasks) * 100);
            
            report += `## 🎯 Overall Progress\n`;
            report += `- Total Tasks: ${totalTasks}\n`;
            report += `- Completed: ${completedTasks}\n`;
            report += `- Overall: ${overallProgress}%\n\n`;
            
            // Estimate completion
            if (completedTasks > 0) {
              const daysElapsed = 7; // Adjust based on actual start date
              const tasksPerDay = completedTasks / daysElapsed;
              const daysRemaining = Math.ceil((totalTasks - completedTasks) / tasksPerDay);
              
              report += `## ⏰ Time Estimates\n`;
              report += `- Current Velocity: ${tasksPerDay.toFixed(1)} tasks/day\n`;
              report += `- Estimated Days to Complete: ${daysRemaining}\n`;
              report += `- Estimated Completion Date: ${new Date(Date.now() + daysRemaining * 86400000).toDateString()}\n`;
            }
            
            // Create or update progress issue
            const progressIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'progress-report',
              state: 'open'
            });
            
            if (progressIssues.data.length > 0) {
              // Update existing
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: progressIssues.data[0].number,
                body: report
              });
            } else {
              // Create new
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: '📊 Sprint Progress Tracker',
                body: report,
                labels: ['progress-report', 'pinned']
              });
            }