# GitHub Actions Pipeline for Neon Tree Music Video Project
# Collaborative DevOps workflow for 3D animation production

name: Neon Tree Production Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      render_quality:
        description: 'Render Quality'
        required: true
        default: 'preview'
        type: choice
        options:
          - preview
          - medium
          - final
      task_type:
        description: 'Task to run'
        required: true
        default: 'daily'
        type: choice
        options:
          - daily
          - full-pipeline
          - render-only
          - comp-only
          - fx-only

env:
  PROJECT_NAME: neon-tree-music-video
  BLENDER_VERSION: '3.6'
  PYTHON_VERSION: '3.10'

jobs:
  # ==================== SETUP & VALIDATION ====================
  setup:
    name: 🔧 Setup Pipeline
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - uses: actions/checkout@v3
      
      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: 📦 Cache Dependencies
        uses: actions/cache@v3
        id: cache
        with:
          path: |
            ~/.cache/pip
            ~/blender-cache
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
      
      - name: 📋 Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          pip install -r requirements.txt
          pip install pytest black flake8
      
      - name: ✅ Validate Project Structure
        run: |
          python pipeline/scripts/validate_structure.py
          echo "::notice::Project structure validated successfully"

  # ==================== ASSET VALIDATION ====================
  validate-assets:
    name: 🎨 Validate Assets
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: 🔍 Check Asset Integrity
        run: |
          python pipeline/scripts/asset_validator.py
          
      - name: 📊 Asset Statistics
        run: |
          python pipeline/scripts/asset_stats.py >> $GITHUB_STEP_SUMMARY
          
      - name: 📤 Upload Asset Report
        uses: actions/upload-artifact@v3
        with:
          name: asset-validation-report
          path: reports/asset_validation.html

  # ==================== MODELING & RIGGING ====================
  modeling:
    name: 🌳 Build 3D Assets
    needs: validate-assets
    runs-on: ubuntu-latest
    container:
      image: nytimes/blender:3.6-cpu-ubuntu18.04
    steps:
      - uses: actions/checkout@v3
      
      - name: 🌲 Generate Tree Model
        run: |
          blender -b -P pipeline/scripts/blender/tree_generator.py
          
      - name: 🏞️ Build Environment
        run: |
          blender -b -P pipeline/scripts/blender/environment_builder.py
          
      - name: 🎯 UV Mapping
        run: |
          blender -b -P pipeline/scripts/blender/uv_mapper.py
          
      - name: 📦 Package Models
        run: |
          tar -czf models.tar.gz assets/models/
          
      - name: 📤 Upload Models
        uses: actions/upload-artifact@v3
        with:
          name: 3d-models
          path: models.tar.gz

  # ==================== ANIMATION ====================
  animation:
    name: 🎬 Animation Pipeline
    needs: modeling
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: 📥 Download Models
        uses: actions/download-artifact@v3
        with:
          name: 3d-models
          
      - name: 🦴 Rigging
        run: |
          python pipeline/scripts/maya/auto_rigger.py
          
      - name: 🎭 Animation
        run: |
          python pipeline/scripts/maya/animate_scene.py
          
      - name: 💾 Cache Animation
        run: |
          python pipeline/scripts/alembic_export.py
          
      - name: 📤 Upload Animation Cache
        uses: actions/upload-artifact@v3
        with:
          name: animation-cache
          path: cache/alembic/

  # ==================== FX & SIMULATION ====================
  fx-simulation:
    name: 🎆 FX & Simulation
    needs: animation
    runs-on: ubuntu-latest
    strategy:
      matrix:
        simulation: [particles, fluids, volumetrics]
    steps:
      - uses: actions/checkout@v3
      
      - name: 🎨 Run ${{ matrix.simulation }} Simulation
        run: |
          python pipeline/scripts/houdini/${{ matrix.simulation }}_sim.py
          
      - name: 💾 Cache Simulation
        run: |
          python pipeline/scripts/cache_simulation.py --type ${{ matrix.simulation }}
          
      - name: 📤 Upload Simulation Cache
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.simulation }}-cache
          path: cache/simulation/${{ matrix.simulation }}/

  # ==================== LIGHTING & SHADING ====================
  lighting:
    name: 💡 Lighting & Shading
    needs: animation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: 🔆 Setup Lighting
        run: |
          python pipeline/scripts/lighting_setup.py
          
      - name: 🎨 Create Neon Shaders
        run: |
          python pipeline/scripts/shader_builder.py --style neon
          
      - name: 📤 Upload Light Rigs
        uses: actions/upload-artifact@v3
        with:
          name: lighting-setup
          path: scenes/lighting/

  # ==================== RENDERING ====================
  rendering:
    name: 🎥 Rendering
    needs: [lighting, fx-simulation]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        frame-range: ['1-100', '101-200', '201-300', '301-400']
    steps:
      - uses: actions/checkout@v3
      
      - name: 📥 Download All Assets
        uses: actions/download-artifact@v3
        
      - name: 🎬 Render Frames ${{ matrix.frame-range }}
        run: |
          python pipeline/scripts/render_manager.py \
            --frames ${{ matrix.frame-range }} \
            --quality ${{ github.event.inputs.render_quality || 'preview' }}
            
      - name: 📤 Upload Renders
        uses: actions/upload-artifact@v3
        with:
          name: renders-${{ matrix.frame-range }}
          path: renders/

  # ==================== COMPOSITING ====================
  compositing:
    name: 🎨 Compositing
    needs: rendering
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: 📥 Download Renders
        uses: actions/download-artifact@v3
        with:
          pattern: renders-*
          merge-multiple: true
          
      - name: 🎯 Auto Composite
        run: |
          python pipeline/scripts/auto_comp.py
          
      - name: 🎨 Color Grading
        run: |
          python pipeline/scripts/color_grade.py --lut neon_night
          
      - name: 📤 Upload Composited Shots
        uses: actions/upload-artifact@v3
        with:
          name: composited-shots
          path: output/comp/

  # ==================== DAILIES & REVIEW ====================
  dailies:
    name: 📺 Generate Dailies
    needs: compositing
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: 📥 Download Composited Shots
        uses: actions/download-artifact@v3
        with:
          name: composited-shots
          
      - name: 🎬 Create Dailies
        run: |
          python pipeline/scripts/generate_dailies.py --date today
          
      - name: 📊 Generate Review Notes
        run: |
          python pipeline/scripts/review_notes.py >> dailies_notes.md
          
      - name: 🌐 Deploy to Review Site
        run: |
          python pipeline/scripts/deploy_review.py --env staging
          
      - name: 💬 Post to Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: '🎬 New dailies ready for review!'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          
      - name: 📧 Send Email Notification
        uses: dawidd6/action-send-mail@v3
        with:
          to: michael@example.com
          subject: 'Neon Tree - Dailies Ready'
          body: 'New dailies are available for review at the staging site.'

  # ==================== FINAL OUTPUT ====================
  final-output:
    name: 🏆 Final Delivery
    if: github.ref == 'refs/heads/main'
    needs: compositing
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: 📥 Download Final Shots
        uses: actions/download-artifact@v3
        
      - name: 🎬 Create Final Edit
        run: |
          python pipeline/scripts/final_edit.py
          
      - name: 🔊 Audio Mix
        run: |
          python pipeline/scripts/audio_mix.py
          
      - name: 📦 Package Deliverables
        run: |
          python pipeline/scripts/package_deliverables.py
          
      - name: 📤 Upload Final Video
        uses: actions/upload-artifact@v3
        with:
          name: final-video
          path: output/final/
          
      - name: 🎯 Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: output/final/*
          body: |
            ## Neon Tree Music Video - Final Release
            
            ### Deliverables:
            - Main video (4K)
            - Social media cuts
            - Behind the scenes
            - Project files archive

  # ==================== MONITORING & METRICS ====================
  metrics:
    name: 📊 Pipeline Metrics
    if: always()
    needs: [setup, validate-assets, modeling, animation, fx-simulation, lighting, rendering, compositing]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: 📈 Collect Metrics
        run: |
          echo "# Pipeline Metrics Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Render Statistics" >> $GITHUB_STEP_SUMMARY
          echo "- Total Frames: 400" >> $GITHUB_STEP_SUMMARY
          echo "- Render Time: ${{ needs.rendering.outputs.total-time }}" >> $GITHUB_STEP_SUMMARY
          echo "- Quality: ${{ github.event.inputs.render_quality || 'preview' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Asset Counts" >> $GITHUB_STEP_SUMMARY
          python pipeline/scripts/project_stats.py >> $GITHUB_STEP_SUMMARY
          
      - name: 📊 Update Dashboard
        run: |
          python pipeline/scripts/update_dashboard.py

# ==================== REUSABLE WORKFLOWS ====================
  notify-team:
    name: 📢 Notify Team
    if: always()
    needs: [dailies, final-output]
    runs-on: ubuntu-latest
    steps:
      - name: 📱 Send Status Update
        run: |
          echo "Pipeline Status: ${{ job.status }}"
          echo "Check the project dashboard for details"